{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func createAuction(duration: Int, minBid: Int) = {
    let lastAuctionIdKey = "last_auction_id"
    let lastAuctionId = match getInteger(this, lastAuctionIdKey) {
                case a:Int => a
                case _ => 0
    }

    let id = lastAuctionId + 1
    let newAuctionId = toString(id)
    let ownerWallet = toBase58String(i.caller.bytes)
    let pmt = value(i.payment)
    if (!isDefined(pmt.assetId)) then throw("Send some tokens, but not Waves")
    else {
        let assetId = toBase58String(value(pmt.assetId))
        let auctionDurationKey = "auction_" + newAuctionId + "_duration"
        let auctionMinBidKey = "auction_" + newAuctionId + "_min_bid"
        let auctionLastBidKey = "auction_" + newAuctionId + "_last_bid"
        let auctionLastBidOwnerKey = "auction_" + newAuctionId + "_last_bid_owner"
        let auctionOwnerKey = "auction_" + newAuctionId + "_owner"
        let auctionAmountKey = "auction_" + newAuctionId + "_amount"
        let auctionAssetIdKey = "auction_" + newAuctionId + "_asset_id"
        let auctionIsActiveKey = "auction_" + newAuctionId + "_is_active"
        let userBalanceKey = "balance_" + ownerWallet + "_" + assetId

        let currentAmount = match getInteger(this, userBalanceKey) {
                case a:Int => a
                case _ => 0
        }
        let newAmount = currentAmount + pmt.amount
        WriteSet([
            DataEntry(auctionDurationKey, height + duration),
            DataEntry(auctionMinBidKey, minBid),
            DataEntry(auctionLastBidKey, 0),
            DataEntry(auctionOwnerKey, ownerWallet),
            DataEntry(auctionAmountKey, pmt.amount),
            DataEntry(auctionAssetIdKey, assetId),
            DataEntry(userBalanceKey, newAmount),
            DataEntry(auctionIsActiveKey, true),
            DataEntry(auctionLastBidOwnerKey, ""),
            DataEntry(lastAuctionIdKey, id)
        ])
    }
}

@Callable(i)
func bid(auctionId: Int, bidAmount: Int) = {
    let newAuctionId = toString(auctionId)
    let auctionDurationKey = "auction_" + newAuctionId + "_duration"
    let auctionMinBidKey = "auction_" + newAuctionId + "_min_bid"
    let auctionLastBidKey = "auction_" + newAuctionId + "_last_bid"
    let auctionOwnerKey = "auction_" + newAuctionId + "_owner"
    let auctionLastBidOwnerKey = "auction_" + newAuctionId + "_last_bid_owner"
    let auctionIsActiveKey = "auction_" + newAuctionId + "_is_active"
    let lastAuctionIdKey = "last_auction_id"

    let auctionDuration = extract(getInteger(this, auctionDurationKey))
    let auctionMinBid = extract(getInteger(this, auctionMinBidKey))
    let auctionLastBid = extract(getInteger(this, auctionLastBidKey))
    let auctionOwner = extract(getString(this, auctionOwnerKey))
    let lastAuctionId = extract(getInteger(this, lastAuctionIdKey))
    let auctionIsActive = extract(getBoolean(this, auctionIsActiveKey))

    let isValidAuction = auctionId <= lastAuctionId
    let isValidHeight = auctionDuration >= height
    let isValidMinBid = bidAmount >= auctionMinBid
    let isValidCurrentBid = bidAmount > auctionLastBid
    let isAmountExists = assetBalance(i.caller, unit) >= bidAmount
    let isValidSender = auctionOwner != toBase58String(i.caller.bytes)

    if(!isValidAuction) then throw("Auction not exists")
    else if(!auctionIsActive) then throw("Auction not active")
    else if(!isValidHeight) then throw("Auction already end")
    else if(!isValidMinBid) then throw("Bid less that min")
    else if(!isValidCurrentBid) then throw("Last bid more than your")
    else if(!isAmountExists) then throw("Not enough balance in your wallet")
    else if(!isValidSender) then throw("You can not bid in your auction")
    else {
        WriteSet([
            DataEntry(auctionLastBidKey, bidAmount),
            DataEntry(auctionLastBidOwnerKey, toBase58String(i.caller.bytes))
        ])
    }
}

@Callable(i)
func cancel(auctionId: Int) = {
    let newAuctionId = toString(auctionId)
    let auctionDurationKey = "auction_" + newAuctionId + "_duration"
    let auctionOwnerKey = "auction_" + newAuctionId + "_owner"
    let auctionAmountKey = "auction_" + newAuctionId + "_amount"
    let auctionAssetIdKey = "auction_" + newAuctionId + "_asset_id"
    let auctionIsActiveKey = "auction_" + newAuctionId + "_is_active"

    let auctionDuration = extract(getInteger(this, auctionDurationKey))
    let auctionAmount = extract(getInteger(this, auctionAmountKey))
    let auctionOwner = extract(getString(this, auctionOwnerKey))
    let auctionAssetId = extract(getString(this, auctionAssetIdKey))
    let auctionIsActive = extract(getBoolean(this, auctionIsActiveKey))
    let userBalanceKey = "balance_" + auctionOwner + "_" + auctionAssetId
    let userBalance = extract(getInteger(this, userBalanceKey))
    let newBalance = userBalance - auctionAmount

    let isValidSender = auctionOwner == toBase58String(i.caller.bytes)

    if(!auctionIsActive) then throw("Auction inactive")
    #else if(auctionDuration < height) then throw("Auction already end")
    else if(!isValidSender) then throw("You are not auction owner")
    else {
        ScriptResult(
            WriteSet([
                DataEntry(userBalanceKey, newBalance),
                DataEntry(auctionIsActiveKey, false)
            ]),
            TransferSet([ScriptTransfer(i.caller, auctionAmount, unit)])
        )
    }
}

@Callable(i)
func payAndReceive(auctionId: Int) = {
    let newAuctionId = toString(auctionId)
    let pmt = extract(i.payment)
    let assetId = toBase58String(value(pmt.assetId))
    let auctionDurationKey = "auction_" + newAuctionId + "_duration"
    let auctionMinBidKey = "auction_" + newAuctionId + "_min_bid"
    let auctionLastBidKey = "auction_" + newAuctionId + "_last_bid"
    let auctionLastBidOwnerKey = "auction_" + newAuctionId + "_last_bid_owner"
    let auctionOwnerKey = "auction_" + newAuctionId + "_owner"
    let auctionAmountKey = "auction_" + newAuctionId + "_amount"
    let auctionAssetIdKey = "auction_" + newAuctionId + "_asset_id"
    let auctionIsActiveKey = "auction_" + newAuctionId + "_is_active"

    let auctionDuration = extract(getInteger(this, auctionDurationKey))
    let auctionAmount = extract(getInteger(this, auctionAmountKey))
    let auctionOwner = extract(getString(this, auctionOwnerKey))
    let auctionAssetId = extract(getString(this, auctionAssetIdKey))
    let auctionIsActive = extract(getBoolean(this, auctionIsActiveKey))
    let userBalanceKey = "balance_" + auctionOwner + "_" + auctionAssetId
    let userBalance = extract(getInteger(this, userBalanceKey))
    let auctionLastBid = extract(getInteger(this, auctionLastBidKey))
    let auctionLastBidOwner = extract(getString(this, auctionLastBidOwnerKey))
    let newBalance = userBalance - auctionAmount

    if (isDefined(pmt.assetId)) then throw("Can transfer Waves only")
    else if(!auctionIsActive) then throw("Auction not active")
    else if(pmt.amount != auctionLastBid) then throw("Amount not equal last bid")
    else if(auctionDuration > height) then throw("Auction not complete")
    else if(Address(fromBase58String(auctionLastBidOwner)) != i.caller) then throw("You are not last bidder")
    else {
        ScriptResult(
            WriteSet([
                DataEntry(userBalanceKey, newBalance),
                DataEntry(auctionIsActiveKey, false)
            ]),
            TransferSet([
                ScriptTransfer(i.caller, auctionAmount, fromBase58String(auctionAssetId)),
                ScriptTransfer(Address(fromBase58String(auctionOwner)), pmt.amount, unit)
            ])
        )
     }
}

@Verifier(tx)
func verify() = {
    true
}
